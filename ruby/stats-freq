#!/usr/bin/env ruby
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) Generate a frequency table from text like seq(1)

# Copyright (c) 2014 eel3
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#
#     3. This notice may not be removed or altered from any source
#     distribution.

require 'optparse'

read_as_float = false

OptionParser.new {|op|
  begin
    op.banner = "usage: #{op.program_name} [OPTION] [file...]"
    op.release = '2013-10-18'
    op.summary_width = 80
    op.version = '1.0.0'

    op.on('-f', '--float', '[optional] read value as float') {|v|
      read_as_float = v
    }
    op.permute!
  rescue
    abort op.help
  end
}

if read_as_float
  def convert(s)
    s.to_f
  end
else
  def convert(s)
    s.to_i(0)
  end
end

value_strlen = freq_strlen = prob_strlen = 0

samples = readlines.collect {|s| convert(s) }
samples.inject(Hash.new(0)) {|r, i| r[i] += 1; r }
       .collect {|k, v|
         {:value => k, :frequency => v, :probability => v * 100.00 / samples.size} 
       }
       .sort {|a, b| a[:value] <=> b[:value] }
       .each {|h|
         value_strlen = h[:value].to_s.size       if h[:value].to_s.size       > value_strlen
         freq_strlen  = h[:frequency].to_s.size   if h[:frequency].to_s.size   > freq_strlen
         prob_strlen  = h[:probability].to_s.size if h[:probability].to_s.size > prob_strlen
       }
       .each {|h|
         fmt = " %*s : %*d : %*s %%\n"
         printf fmt, value_strlen, h[:value].to_s,
                     freq_strlen,  h[:frequency],
                     prob_strlen,  h[:probability].to_s
       }
